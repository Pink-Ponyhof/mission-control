package de.qaware.theo.mc.data;

import de.qaware.theo.mc.model.Metadata;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.logging.Logger;

/**
 * The class handling all file operations for properties file.
 * Reads and writes utf-8 encoded text files.
 *
 * @author s.wittke
 */
public class PropertiesFileOperator {

    public static final String AUTOGENERATED = "Autogenerated properties file by mission control.";

    private final Map<String, String> propertiesMap;
    private final Metadata metadata;
    private final Path filePath;
    private final ReadWriteLock lock = new ReentrantReadWriteLock();

    public static final Logger LOGGER = Logger.getLogger(PropertiesFileOperator.class.getName());

    public PropertiesFileOperator(Metadata metadata) {
        propertiesMap = new HashMap<>();
        this.metadata = metadata;
        filePath = Paths.get(metadata.getFileName());
    }


    /**
     * Read the properties file specified by the metadata.
     * If the file could not be found, generate the file with empty values.
     *
     * @return a map containing all key value pairs if the file was found, a map containing the keys and empty values otherwise
     * @throws IOException
     */
    public Map<String, String> read() throws IOException {
        try {
            readFile();
        } catch (NoSuchFileException e) {
            generatePropertiesFile();
        }
        return propertiesMap;
    }

    public void write(Map<String, String> propertiesMap) throws IOException {
        Properties properties = new Properties();
        properties.putAll(propertiesMap);

        writeProperties(properties);
    }

    /**
     * @return the time the file was last changed in milliseconds
     * @throws IOException on any error accessing the file
     */
    public long lastChange() throws IOException {
        return Files.getLastModifiedTime(filePath).toMillis();
    }

    private void generatePropertiesFile() throws IOException {
        LOGGER.info("Currently there is no propertiesMap file. Creating one.");

        Properties properties = getProperties();
        writeProperties(properties);
    }

    private Properties getProperties() {
        Properties properties = new Properties();
        propertiesMap.clear();
        for (String key : metadata.getKeys()) {
            if (metadata.getKeys().contains(key)) {
                properties.setProperty(key, "");
                propertiesMap.put(key, "");
            }
        }
        return properties;
    }

    private void writeProperties(Properties properties) throws IOException {
        lock.writeLock().lock();
        try (OutputStream out = Files.newOutputStream(filePath);
             OutputStreamWriter writer = new OutputStreamWriter(out, "UTF-8")) {
            properties.store(writer, AUTOGENERATED);
        }finally {
            lock.writeLock().unlock();
        }
    }

    private void readFile() throws IOException {
        lock.readLock().lock();
        try (InputStream inputStream = Files.newInputStream(filePath);
             InputStreamReader in = new InputStreamReader(inputStream, "UTF-8")) {
            Properties properties = new Properties();
            properties.load(in);

            initMap(properties);
        }finally {
            lock.readLock().unlock();
        }
    }

    private void initMap(Properties properties) {
        for (String key : properties.stringPropertyNames()) {
            if (metadata.getKeys().contains(key)) {
                propertiesMap.put(key, properties.getProperty(key));
            }
        }
    }
}
